{"version":3,"sources":["Redux/DialogsReducer.tsx","assets/images/user-avatar.jpg","api/api.ts","Components/Users/users.module.css","Components/Navbar/Navbar.module.css","Components/common/FormsControls/FormsControls.tsx","Redux/FriendsReducer.tsx","utils/object-helper.ts","Redux/UsersReducer.tsx","Redux/auth_reducer.ts","Redux/app_reducer.ts","Redux/redux_store.ts","Components/Friends/Friends.tsx","Components/Navbar/Navbar.tsx","Components/News/News.tsx","Components/Music/Music.tsx","Components/Settings/Settings.tsx","Components/common/Paginator/Paginator.tsx","Components/Users/User.tsx","Components/Users/Users.tsx","Redux/users_selectors.ts","Components/Users/UsersContainer.tsx","Components/Header/Header.tsx","Components/Header/HeaderContainer.tsx","Components/Login/Login.tsx","hoc/WithSuspense.tsx","App.tsx","index.tsx","Components/Friends/Friends.module.css","assets/images/__Iphone-spinner-1.gif","Components/common/Preloader/Preloader.tsx","Components/common/FormsControls/FormControls.module.css","utils/validators/validators.tsx","Components/common/Paginator/Paginator.module.css","Components/Header/Header.module.css","Redux/ProfileReducer.tsx"],"names":["SEND_MESSAGE","initialState","messages","id","message","dialogs","name","sendMessageActionCreator","newMessageBody","type","dialogsReducer","state","action","body","Date","getTime","instance","axios","create","withCredentials","baseURL","headers","usersAPI","getUsers","currentPage","pageSize","get","then","response","data","follow","userId","post","unfollow","delete","getProfile","console","warn","profileAPI","getStatus","updateStatus","status","put","savePhoto","photoFile","formData","FormData","append","saveProfile","profile","authAPI","me","login","email","password","rememberMe","captcha","logout","securityAPI","getCaptchaUrl","module","exports","FormControl","meta","touched","error","children","hasError","className","styles","formControl","Textarea","props","input","restProps","Input","createField","placeholder","validators","component","text","validate","avatarURL","friendsReducer","updateObjectIbArray","items","itemId","objPropName","newObjProps","map","u","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","users","totalUsersCount","isFetching","folowingInProgress","followUnfollowFlow","dispatch","apiMethod","actionCreator","a","toggleIsFollowingProgress","resultCode","followSuccess","unfollowSuccess","setCurrentPage","toggleIsFetching","usersReducer","followed","count","filter","SET_USER_DATA","GET_CAPTCHA_URL_SUCCESS","isAuth","captchaUrl","setAuthUserData","payload","getCaptchaUrlSuccess","getAuthUserData","length","stopSubmit","_error","url","authReducer","INITIALIZED_SUCCESS","initialized","appReducer","rootReducer","combineReducers","profilePage","profileReducer","dialogsPage","friends","usersPage","auth","form","formReducer","app","middlewareEnhancer","applyMiddleware","thunkMiddleware","composedEnhancers","compose","store","createStore","connect","s","friendsItem","friendImage","src","Navbar","nav","item","to","activeClassName","activeLink","active","News","Music","Settings","Paginator","totalItemsCount","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","paginator","onClick","p","cn","selectedPage","pageNumber","event","User","user","photos","small","userPhoto","disabled","some","Users","createSelector","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersContainer","this","Preloader","React","Component","bind","totalCount","Header","header","loginBlock","HeaderContainer","LoginReduxForm","reduxForm","handleSubmit","onSubmit","required","style","formSummaryError","useSelector","useDispatch","withSuspense","fallback","DialogsContainer","lazy","ProfileContainer","App","catchAllUnhandledErrors","e","initializeApp","window","addEventListener","removeEventListener","exact","path","render","withRouter","promise","Promise","all","ReactDOM","document","getElementById","backgroundColor","preloader","value","maxLengthCreator","maxLength","ADD_POST","SET_USER_PROFILE","SET_USER_STATUS","SAVE_PHOTO_SUCCESS","posts","likesCount","addPostActionCreator","newPostText","setUserStatus","getUserProfile","getUserStatus","updateUserStatus","file","getState","reject","newPost"],"mappings":"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","file":"static/js/main.a6b02b6b.chunk.js","sourcesContent":["\r\nconst SEND_MESSAGE = \"SEND-MESSAGE\";\r\nexport type DialogsActionsType = ReturnType<typeof sendMessageActionCreator>\r\n\r\n\r\nexport type DialogType = {\r\n    name: string,\r\n    id: number\r\n}\r\nexport type MessageType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\nlet initialState = {\r\n    messages: [\r\n        {id: 1, message: \"Hi\"},\r\n        {id: 2, message: \"How is your it-kamasutra\"},\r\n        {id: 3, message: \"Yo\"},\r\n        {id: 4, message: \"Yo\"},\r\n        {id: 5, message: \"Yo\"},\r\n    ] as Array<MessageType>,\r\n    dialogs: [\r\n        {id: 1, name: \"Dimych\"},\r\n        {id: 2, name: \"Andrey\"},\r\n        {id: 3, name: \"Sveta\"},\r\n        {id: 4, name: \"Sasha\"},\r\n        {id: 5, name: \"Viktor\"},\r\n        {id: 6, name: \"Valera\"},\r\n    ] as Array<DialogType>\r\n}\r\n\r\nexport type InitialDialogsType = typeof initialState\r\n\r\nconst dialogsReducer = (state:InitialDialogsType = initialState, action: ActionsType):InitialDialogsType => {\r\n\r\n    switch (action.type) {\r\n        case SEND_MESSAGE:\r\n            let body = action.newMessageBody\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: new Date().getTime(), message: body}]\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const sendMessageActionCreator = (newMessageBody: string) => {\r\n    return {\r\n        type: SEND_MESSAGE,\r\n        newMessageBody\r\n    } as const\r\n}\r\n\r\ntype ActionsType = ReturnType<typeof  sendMessageActionCreator>\r\n\r\nexport default dialogsReducer","export default __webpack_public_path__ + \"static/media/user-avatar.60b92e78.jpg\";","import axios from \"axios\";\r\nimport {FormDataType} from \"../Components/Login/Login\";\r\nimport {ProfileType} from \"../Redux/Store\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: `https://social-network.samuraijs.com/api/1.0/`,\r\n    headers: {\r\n        \"API-KEY\": \"5ce17daa-8642-4a76-b5a3-3d919299f84b\"\r\n    }\r\n})\r\n\r\nexport const usersAPI = {\r\n    getUsers (currentPage: number = 1, pageSize: number = 10) {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => {\r\n                return response.data\r\n            });\r\n    },\r\n    follow(userId: number) {\r\n        return instance.post(`follow/${userId}`)\r\n    },\r\n    unfollow(userId: number) {\r\n        return instance.delete(`follow/${userId}`\r\n            )\r\n    },\r\n    getProfile(userId: number) {\r\n        console.warn('Obsolete method. Please use profileAPI object')\r\n        return profileAPI.getProfile(userId);\r\n    }\r\n};\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: number) {\r\n        return instance.get(`profile/` + userId);\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get(`profile/status/` + userId);\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put(`profile/status`, {status: status});\r\n    },\r\n    savePhoto(photoFile: File) {\r\n        const formData = new FormData();\r\n        formData.append(\"image\",photoFile);\r\n        return instance.put(`profile/photo`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        })\r\n    },\r\n    saveProfile(profile: ProfileType) {\r\n        return instance.put(`profile`, profile);\r\n    }\r\n\r\n};\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get(`auth/me`)\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean = false, captcha: string | null = null ) {\r\n        return instance.post(`auth/login`, {email, password, rememberMe, captcha})\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`);\r\n    },\r\n\r\n}\r\n\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return instance.get(`security/get-captcha-url`)\r\n    }\r\n\r\n}\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"users_userPhoto__20oQP\",\"selectedPage\":\"users_selectedPage__qwO0B\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__2e8WG\",\"item\":\"Navbar_item__fnSNb\",\"activeLink\":\"Navbar_activeLink__1UVwZ\"};","import React from \"react\";\r\nimport styles from './FormControls.module.css';\r\nimport {Field, WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\";\r\nimport {FieldValidatorType} from \"../../../utils/validators/validators\";\r\n\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\nexport const FormControl: React.FC<FormControlPropsType> = ({meta: {touched, error}, children}) => {\r\n    const hasError = touched && error;\r\n\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, children, ...restProps} = props;\r\n    return (\r\n        <FormControl {...props}><textarea {...input} {...restProps} /></FormControl>\r\n    )\r\n};\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, children, ...restProps} = props;\r\n    return (\r\n        <FormControl {...props}><input {...input} {...restProps} /></FormControl>\r\n\r\n    )\r\n};\r\n\r\nexport function createField<FormKeysType extends string>(placeholder: string | null, name: FormKeysType, validators: Array<FieldValidatorType>,\r\n                                                         component: React.FC<WrappedFieldProps>, props = {}, text = \"\") {\r\n    return (\r\n        <div>\r\n            <Field placeholder={placeholder}\r\n                   name={name}\r\n                   validate={validators}\r\n                   component={component}\r\n                   {...props}\r\n                   {...text}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport type GetStringKeys<T> = Extract<keyof T, string>","import {ActionsType, FriendType} from \"./Store\";\r\n\r\nlet initialState: Array<FriendType> = [\r\n     {\r\n          name: \"Garry\",\r\n          avatarURL: \"https://nick-intl.mtvnimages.com/uri/mgid:file:gsp:kids-assets:/nick/properties/spongebob-squarepants/characters/gary-character-web-desktop.png?height=0&width=480&matte=true&crop=false\"\r\n     },\r\n     {name: \"Patrick\", avatarURL: \"https://upload.wikimedia.org/wikipedia/ru/4/4e/Patrick_star-4854.jpg\"},\r\n     {name: \"Squidi\", avatarURL: \"https://www.meme-arsenal.com/memes/8ba9362a677fe74c4e7af0feaeef2360.jpg\"}\r\n]\r\n\r\nconst friendsReducer = (state = initialState, action:ActionsType) => {\r\n     return state\r\n}\r\n\r\n\r\n\r\nexport default friendsReducer","export const updateObjectIbArray = (items: Array<any>, itemId: string, objPropName: string, newObjProps: {[key: string]: any}) => {\r\n    return items.map(u => {\r\n        if (u[objPropName] === itemId) {\r\n            return {...u, ...newObjProps}\r\n        }\r\n        return u;\r\n    })\r\n}","import {ActionsType} from \"./Store\";\r\nimport {usersAPI} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {updateObjectIbArray} from \"../utils/object-helper\";\r\n\r\ntype PhotosType = {\r\n    small: string\r\n    large: string\r\n}\r\nexport type UserType = {\r\n    id: number\r\n    photos: PhotosType\r\n    followed: boolean\r\n    fullName: string\r\n    name: string\r\n    status: string\r\n}\r\n\r\nexport type InitialStateType = {\r\n    users: Array<UserType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    folowingInProgress: Array<number>\r\n}\r\n\r\nconst FOLLOW = 'FOLLOW';\r\nconst UNFOLLOW = 'UNFOLLOW';\r\nconst SET_USERS = 'SET_USERS';\r\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\r\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT';\r\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING';\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS'\r\n\r\nlet initialState: InitialStateType = {\r\n    users: [] as Array<UserType>,\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    folowingInProgress: []\r\n};\r\n\r\nexport type UsersActionsType =\r\n    ReturnType<typeof follow>\r\n    | ReturnType<typeof unfollow>\r\n    | ReturnType<typeof setUsers>\r\n    | ReturnType<typeof setCurrentPage>\r\n    | ReturnType<typeof setTotalUsersCount>\r\n    | ReturnType<typeof toggleIsFetching>\r\n    | ReturnType<typeof toggleIsFollowingProgress>\r\n\r\nconst usersReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: updateObjectIbArray(state.users, action.userId, \"id\", {followed: true})\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: updateObjectIbArray(state.users, action.userId, \"id\", {followed: false})\r\n            }\r\n        case SET_USERS:\r\n            return {\r\n                ...state,\r\n                users: [...action.users]\r\n            }\r\n        case SET_CURRENT_PAGE:\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            }\r\n        case SET_TOTAL_USERS_COUNT:\r\n            return {\r\n                ...state,\r\n                totalUsersCount: action.count\r\n            }\r\n        case TOGGLE_IS_FETCHING:\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS:\r\n            return {\r\n                ...state,\r\n                folowingInProgress: action.isFetching\r\n                    ? [...state.folowingInProgress, action.userId]\r\n                    : state.folowingInProgress.filter(id => id !== action.userId)\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const followUnfollowFlow = async (dispatch: Dispatch, userId: number, apiMethod: any, actionCreator: any) => {\r\n    dispatch(toggleIsFollowingProgress(true, userId))\r\n    let response = await apiMethod(userId)\r\n\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(actionCreator(userId));\r\n    }\r\n    dispatch(toggleIsFollowingProgress(false, userId))\r\n\r\n}\r\n\r\nexport const followSuccess = (userId: number) => {\r\n    return {\r\n        type: FOLLOW,\r\n        userId\r\n    } as const\r\n}\r\nexport const unfollowSuccess = (userId: number) => {\r\n    return {\r\n        type: UNFOLLOW,\r\n        userId\r\n    } as const\r\n}\r\nexport const setUsers = (users: Array<UserType>) => {\r\n    return {\r\n        type: SET_USERS,\r\n        users\r\n    } as const\r\n}\r\nexport const setCurrentPage = (currentPage: number) => {\r\n    return {\r\n        type: SET_CURRENT_PAGE,\r\n        currentPage: currentPage\r\n    } as const\r\n}\r\nexport const setTotalUsersCount = (totalUsersCount: number) => {\r\n    return {\r\n        type: SET_TOTAL_USERS_COUNT,\r\n        count: totalUsersCount\r\n    } as const\r\n}\r\nexport const toggleIsFetching = (isFetching: boolean) => {\r\n    return {\r\n        type: TOGGLE_IS_FETCHING,\r\n        isFetching\r\n    } as const\r\n}\r\nexport const toggleIsFollowingProgress = (isFetching: boolean, userId: number) => {\r\n    return {\r\n        type: TOGGLE_IS_FOLLOWING_PROGRESS,\r\n        isFetching,\r\n        userId\r\n    } as const\r\n}\r\n\r\nexport const requestUsers = (currentPage: number, pageSize: number) => {\r\n    return async (dispatch: Dispatch) => {\r\n        dispatch(toggleIsFetching(true));\r\n        dispatch(setCurrentPage(currentPage));\r\n\r\n        let data = await usersAPI.getUsers(currentPage, pageSize)\r\n\r\n        dispatch(toggleIsFetching(false));\r\n        dispatch(setUsers(data.items));\r\n        dispatch(setTotalUsersCount(data.totalCount));\r\n\r\n    }\r\n}\r\n\r\nexport const follow = (userId: number) => {\r\n    return async (dispatch: Dispatch) => {\r\n        followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), followSuccess)\r\n    }\r\n}\r\n\r\nexport const unfollow = (userId: number) => {\r\n    return async (dispatch: Dispatch) => {\r\n        followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), unfollowSuccess)\r\n    }\r\n}\r\n\r\nexport default usersReducer","import {authAPI, securityAPI} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {ThunkAction, ThunkDispatch} from \"redux-thunk\";\r\nimport {AppStateType} from \"./redux_store\";\r\n\r\ntype InitialStateType = {\r\n    id: number | null\r\n    email: string | null\r\n    login: string | null\r\n    isAuth: boolean\r\n    captchaUrl: string | null\r\n}\r\n\r\nconst SET_USER_DATA = 'samurai-network/auth/SET_USER_DATA';\r\nconst GET_CAPTCHA_URL_SUCCESS = 'samurai-network/auth/GET_CAPTCHA_URL_SUCCESS';\r\n\r\nlet initialState: InitialStateType = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false,\r\n    captchaUrl: null\r\n};\r\n\r\ntype ActionsType = ReturnType<typeof setAuthUserData> |\r\n    ReturnType<typeof getCaptchaUrlSuccess>\r\n    ;\r\n\r\nconst authReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                // ...action.payload\r\n                id: action.payload.userId,\r\n                email: action.payload.email,\r\n                login: action.payload.login,\r\n                isAuth: true\r\n            };\r\n        case GET_CAPTCHA_URL_SUCCESS:\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const setAuthUserData = (userId: number | null, email: string | null, login: string | null, isAuth: boolean) => {\r\n    return {\r\n        type: SET_USER_DATA,\r\n        payload: {userId, login, email, isAuth}\r\n    } as const\r\n};\r\n\r\nexport const getCaptchaUrlSuccess = (captchaUrl: string | null) => {\r\n    return {\r\n        type: GET_CAPTCHA_URL_SUCCESS,\r\n        payload: {captchaUrl}\r\n    } as const\r\n};\r\n\r\nexport const getAuthUserData = (): ThunkType => async (dispatch: ThunkDispatchType) => {\r\n    let response = await authAPI.me()\r\n\r\n    if (response.data.resultCode === 0) {\r\n        let {id, email, login} = response.data.data\r\n        dispatch(setAuthUserData(id, email, login, true));\r\n    }\r\n}\r\n\r\n\r\ntype ThunkType = ThunkAction<void, AppStateType, unknown, ActionsType>\r\n\r\ntype ThunkDispatchType = ThunkDispatch<AppStateType, unknown, ActionsType>\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean = false, captcha: string) => async (dispatch: ThunkDispatchType) => {\r\n    let response = await authAPI.login(email, password, rememberMe = false, captcha)\r\n\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(getAuthUserData());\r\n    } else {\r\n        if (response.data.resultCode === 10) {\r\n            dispatch(getCaptchaUrl());\r\n        }\r\n        let message = response.data.messages.length > 0 ?\r\n            response.data.messages[0]\r\n            : \"Some error\"\r\n        dispatch(stopSubmit(\"login\", {_error: \"Common error\"}) as ActionsType);\r\n    }\r\n\r\n}\r\n\r\nexport const getCaptchaUrl = () => async (dispatch: ThunkDispatchType) => {\r\n    const response = await securityAPI.getCaptchaUrl()\r\n    const captchaUrl = response.data.url;\r\n    dispatch(getCaptchaUrlSuccess(captchaUrl));\r\n}\r\n\r\nexport const logout = (): ThunkType => async (dispatch: ThunkDispatchType) => {\r\n    let response = await authAPI.logout()\r\n\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setAuthUserData(null, null, null, false));\r\n    }\r\n\r\n}\r\n\r\nexport default authReducer;","import {Dispatch} from \"redux\";\r\nimport {getAuthUserData, setAuthUserData} from \"./auth_reducer\";\r\nimport {ThunkAction, ThunkDispatch} from \"redux-thunk\";\r\nimport {AppStateType} from \"./redux_store\";\r\n\r\ntype InitialStateType = {\r\n    initialized: boolean\r\n}\r\n\r\nconst INITIALIZED_SUCCESS = 'INITIALIZED_SUCCESS';\r\n\r\nlet initialState: InitialStateType = {\r\n    initialized: false\r\n};\r\n\r\ntype ActionsType = ReturnType<typeof initializedSuccess>;\r\n\r\nconst appReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case INITIALIZED_SUCCESS:\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const initializedSuccess = () => {\r\n    return {\r\n        type: INITIALIZED_SUCCESS\r\n    } as const\r\n};\r\n\r\ntype ThunkType = ThunkAction<void, AppStateType, unknown, ActionsType>\r\n\r\ntype ThunkDispatchType = ThunkDispatch<AppStateType, unknown, ActionsType>\r\n\r\nexport const initializeApp = ():ThunkType => (dispatch: ThunkDispatchType) => {\r\n    let promise = dispatch(getAuthUserData());\r\n    Promise.all([promise])\r\n        .then(() => {\r\n            dispatch(initializedSuccess());\r\n        })\r\n}\r\n\r\nexport default appReducer;","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport profileReducer from \"./ProfileReducer\";\r\nimport dialogsReducer from \"./DialogsReducer\";\r\nimport friendsReducer from \"./FriendsReducer\";\r\nimport usersReducer from \"./UsersReducer\";\r\nimport authReducer from \"./auth_reducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {reducer as formReducer} from \"redux-form\";\r\nimport appReducer from \"./app_reducer\";\r\n\r\n\r\nlet rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    friends: friendsReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer\r\n});\r\n\r\n\r\nconst middlewareEnhancer = applyMiddleware(thunkMiddleware)\r\nconst composedEnhancers = compose(middlewareEnhancer)\r\n\r\nconst store = createStore(rootReducer, composedEnhancers);\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\n\r\nexport default store;","import React from \"react\";\r\nimport s from './Friends.module.css'\r\nimport {FriendType} from \"../../Redux/Store\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../Redux/redux_store\";\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    friends: FriendType[]\r\n}\r\n\r\nexport const Friends = (props: MapStateToPropsType) => {\r\n    return (\r\n        <div>\r\n            <h2>Friends</h2>\r\n            <div className={s.friendsItem}>\r\n                <img className={s.friendImage}\r\n                     src={props.friends[0].avatarURL}/>\r\n                <p>{props.friends[0].name}</p>\r\n            </div >\r\n            <div className={s.friendsItem}>\r\n                <img className={s.friendImage}\r\n                     src={props.friends[1].avatarURL}/>\r\n                <p>{props.friends[1].name}</p>\r\n            </div>\r\n            <div className={s.friendsItem}>\r\n                <img className={s.friendImage}\r\n                     src={props.friends[2].avatarURL}/>\r\n                <p>{props.friends[2].name}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType ): MapStateToPropsType => {\r\n    return {\r\n        friends: state.friends\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {})(Friends)","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from './Navbar.module.css';\r\nimport Friends from \"../Friends/Friends\";\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={s.item}>\r\n                <NavLink to={\"/profile\"} activeClassName={s.activeLink}>Profile</NavLink>\r\n            </div>\r\n            <div className={`${s.item} ${s.active}`}>\r\n                <NavLink to={\"/dialogs\"} activeClassName={s.activeLink}>Messages</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to={\"/news\"} activeClassName={s.activeLink}>News</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to={\"/music\"} activeClassName={s.activeLink}>Music</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to={\"/settings\"} activeClassName={s.activeLink}>Settings</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to={\"/users\"} activeClassName={s.activeLink}>Users</NavLink>\r\n            </div>\r\n            <Friends />\r\n        </nav>\r\n\r\n    );\r\n}\r\n\r\n\r\nexport default Navbar","import React from \"react\";\r\nimport s from './News.module.css';\r\n\r\nconst News = () => {\r\n    return (\r\n        <div >\r\n            News\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default News","import React from \"react\";\r\nimport s from './Music.module.css';\r\n\r\nconst Music = () => {\r\n    return (\r\n        <div >\r\n            Music\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Music","import React from \"react\";\r\n\r\nconst Settings = () => {\r\n    return (\r\n        <div >\r\n            Settings\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Settings","import React, {useState} from \"react\";\r\nimport styles from \"./Paginator.module.css\";\r\nimport cn from \"classnames\";\r\n\r\ntype PropsType = {\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (page: number) => void\r\n    portionSize: number\r\n}\r\n\r\nlet Paginator = ({totalItemsCount, pageSize, currentPage, onPageChanged, portionSize = 10}: PropsType) => {\r\n\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize);\r\n\r\n    let pages = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize);\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n    return (\r\n        <div className={styles.paginator}>\r\n            { portionNumber > 1 &&\r\n            <button onClick={() => {\r\n                setPortionNumber(portionNumber - 1)\r\n            }}>PREV</button>}\r\n\r\n            {pages\r\n                .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n                .map(p => {\r\n                    return <span className={cn({\r\n                        [styles.selectedPage]: currentPage === p\r\n                    }, styles.pageNumber)}\r\n                                 key={p}\r\n                                 onClick={(event) => {\r\n                                     onPageChanged(p)\r\n                                 }}>{p}</span>\r\n                })}\r\n            {portionCount > portionNumber &&\r\n            <button onClick={() => {\r\n                setPortionNumber(portionNumber + 1)\r\n            }}>NEXT</button>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Paginator","import React from \"react\";\r\nimport styles from \"./users.module.css\";\r\nimport userPhoto from \"../../assets/images/user-avatar.jpg\";\r\nimport {NavLink} from 'react-router-dom';\r\nimport {UserType} from \"../../Redux/UsersReducer\";\r\n\r\ntype PropsType = {\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (page: number) => void\r\n    users: Array<UserType>\r\n    unfollow: (userId: number) => void\r\n    follow: (userId: number) => void\r\n    folowingInProgress: Array<number>\r\n}\r\nlet User = ({user, folowingInProgress, unfollow, follow}: any) => {\r\n    return (\r\n        <div key={user.id}>\r\n            <span>\r\n                <div>\r\n                    <NavLink to={'/profile/' + user.id}>\r\n                        <img src={user.photos.small !== null ? user.photos.small : userPhoto}\r\n                             className={styles.userPhoto}/>\r\n                    </NavLink>\r\n                </div>\r\n                <div>\r\n                    {user.followed\r\n                        ? <button disabled={folowingInProgress.some((id: number) => +id === user.id)} onClick={() => {\r\n                            unfollow(user.id);\r\n                        }}>Unfollow</button>\r\n                        : <button disabled={folowingInProgress.some((id: number) => +id === user.id)} onClick={() => {\r\n                            follow(user.id)\r\n                        }}>Follow</button>\r\n                    }\r\n                </div>\r\n            </span>\r\n            <span>\r\n                    <span>\r\n                        <div>{user.name}</div>\r\n                        <div>{user.status}</div>\r\n                    </span>\r\n                    <span>\r\n                        <div>{\"user.location.country\"}</div>\r\n                    <   div>{\"user.location.city\"}</div>\r\n                    </span>\r\n            </span>\r\n        </div>)\r\n}\r\n\r\nexport default User","import React from \"react\";\r\nimport {UserType} from \"../../Redux/UsersReducer\";\r\nimport Paginator from \"../common/Paginator/Paginator\";\r\nimport User from \"./User\";\r\n\r\ntype PropsType = {\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (page: number) => void\r\n    users: Array<UserType>\r\n    unfollow: (userId: number) => void\r\n    follow: (userId: number) => void\r\n    folowingInProgress: Array<number>\r\n    portionSize: number\r\n}\r\nlet Users = ({totalItemsCount, pageSize, currentPage, onPageChanged, users,portionSize, ...props}: PropsType) => {\r\n\r\n    return (\r\n        <div>\r\n            <Paginator totalItemsCount={totalItemsCount} currentPage={currentPage}\r\n                       onPageChanged={onPageChanged} pageSize={pageSize} portionSize={portionSize}/>\r\n\r\n            {\r\n                users.map(u => <User user={u} folowingInProgress={props.folowingInProgress}\r\n                                     follow={props.follow} unfollow={props.unfollow} key={u.id}\r\n                />)\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Users","import {AppStateType} from \"./redux_store\";\r\nimport {createSelector} from \"reselect\";\r\n\r\nconst getUsersSelector = (state: AppStateType) => {\r\n    return state.usersPage.users;\r\n}\r\n\r\nexport const getUsers = createSelector(getUsersSelector,(users) => {\r\n        return users.filter(u => true);\r\n    }\r\n)\r\n\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return state.usersPage.pageSize;\r\n}\r\n\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n    return state.usersPage.totalUsersCount;\r\n}\r\n\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n    return state.usersPage.currentPage;\r\n}\r\n\r\nexport const getIsFetching = (state: AppStateType) => {\r\n    return state.usersPage.isFetching;\r\n}\r\n\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n    return state.usersPage.folowingInProgress;\r\n}","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    follow,\r\n    requestUsers,\r\n    setCurrentPage,\r\n    toggleIsFollowingProgress,\r\n    unfollow,\r\n    UserType\r\n} from \"../../Redux/UsersReducer\";\r\nimport {AppStateType} from \"../../Redux/redux_store\";\r\nimport Users from \"./Users\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport {compose} from \"redux\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsers\r\n} from \"../../Redux/users_selectors\";\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    users: Array<UserType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    folowingInProgress: Array<number>\r\n}\r\n\r\nexport type UsersPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nclass UsersContainer extends React.Component<UsersPropsType> {\r\n    componentDidMount() {\r\n        this.props.getUsers(this.props.currentPage, this.props.pageSize);\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        this.props.setCurrentPage(pageNumber);\r\n\r\n        this.props.getUsers(pageNumber, this.props.pageSize);\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        return <>\r\n            {this.props.isFetching ? <Preloader/> : null}\r\n            <Users totalItemsCount={this.props.totalUsersCount}\r\n                   pageSize={this.props.pageSize}\r\n                   currentPage={this.props.currentPage}\r\n                   onPageChanged={this.onPageChanged}\r\n                   users={this.props.users}\r\n                   follow={this.props.follow}\r\n                   unfollow={this.props.unfollow}\r\n                   folowingInProgress={this.props.folowingInProgress}\r\n                   portionSize={10}\r\n            />\r\n        </>\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n        return {\r\n            users: getUsers(state),\r\n            pageSize: getPageSize(state),\r\n            totalUsersCount: getTotalUsersCount(state),\r\n            currentPage: getCurrentPage(state),\r\n            isFetching: getIsFetching(state),\r\n            folowingInProgress: getFollowingInProgress(state)\r\n\r\n\r\n        }\r\n    }\r\n;\r\n\r\n\r\ntype MapDispatchToPropsType =\r\n    {\r\n        follow: (userId: number) => void\r\n        unfollow: (userId: number) => void\r\n        setCurrentPage: (pageNumber: number) => void\r\n        toggleIsFollowingProgress: (isFetching: boolean, userId: number) => void\r\n        getUsers: (currentPage: number, pageSize: number) => void\r\n    }\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect<MapStateToPropsType, MapDispatchToPropsType, {}, AppStateType>(mapStateToProps, {\r\n        follow, unfollow, setCurrentPage, toggleIsFollowingProgress, getUsers: requestUsers\r\n    })\r\n)(UsersContainer)","import React from 'react';\r\nimport s from './Header.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype HeaderPropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n    logout: () => void\r\n}\r\n\r\nconst Header = (props: HeaderPropsType) => {\r\n    return(\r\n        <header className={s.header}>\r\n            <img src={'https://upload.wikimedia.org/wikipedia/commons/thumb/e/e5/NASA_logo.svg/1024px-NASA_logo.svg.png'}/>\r\n            <div className={s.loginBlock}>\r\n                {props.isAuth ? <NavLink to={'/profile/16100'}>{props.login}\r\n                <button onClick={()=>props.logout()}>Log out</button> </NavLink>\r\n                    :<NavLink to={'/login'}>Login</NavLink>\r\n                }\r\n            </div>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header","import React from 'react';\r\nimport Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../Redux/redux_store\";\r\nimport {logout} from \"../../Redux/auth_reducer\";\r\n\r\ntype HeaderContainerType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n    logout: () => void\r\n    getAuthUserData: () => void\r\n}\r\n\r\nclass HeaderContainer extends React.Component<HeaderContainerType, any> {\r\n\r\n    render() {\r\n        return (\r\n            <Header\r\n                {...this.props}\r\n            />\r\n        );\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login\r\n});\r\n\r\nexport default connect(mapStateToProps, {logout})(HeaderContainer)","import React, {FC} from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, Input} from \"../common/FormsControls/FormsControls\";\r\nimport {required} from \"../../utils/validators/validators\";\r\nimport {connect, useDispatch, useSelector} from \"react-redux\";\r\nimport {login} from \"../../Redux/auth_reducer\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport style from './../common/FormsControls/FormControls.module.css';\r\nimport {AppStateType} from \"../../Redux/redux_store\";\r\n\r\nexport type FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n}\r\ntype LoginOwnProps= {\r\n    captchaUrl: string | null\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<FormDataType, LoginOwnProps> & LoginOwnProps> = ({handleSubmit, error, captchaUrl}) => {\r\n    return (\r\n            <form onSubmit={handleSubmit}>\r\n                    {createField(\"Email\", \"email\", [required], Input)}\r\n                    {createField(\"Password\", \"password\", [required], Input, {type:\"password\"})}\r\n                    {createField(null, \"rememberMe\", [], Input, {type: \"checkbox\"}, \"remember me\")}\r\n                {captchaUrl && <img src={captchaUrl}/>}\r\n                {captchaUrl && createField(\"Symbols from image\", \"captcha\", [required], Input, {})}\r\n                {error && <div className={style.formSummaryError}>\r\n                    {error}\r\n                </div> }\r\n                <div>\r\n                    <button>Login</button>\r\n                </div>\r\n            </form>\r\n    )\r\n};\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType, LoginOwnProps>({form: 'login'})(LoginForm);\r\n\r\n// type LoginPropsType = {\r\n//     isAuth: boolean\r\n//     login: (email: string, password: string, rememberMe: boolean, captcha: string) => void\r\n//     captchaUrl: string | null\r\n// }\r\n\r\nconst Login: FC= () => {\r\n    const captchaUrl = useSelector((state: AppStateType) => state.auth.captchaUrl )\r\n    const isAuth = useSelector((state: AppStateType) => state.auth.isAuth )\r\n    const dispatch = useDispatch()\r\n\r\n    const onSubmit = (formData: FormDataType) => {\r\n            dispatch(login(formData.email, formData.password, formData.rememberMe, formData.captcha));\r\n    }\r\n    debugger\r\n\r\n    if (isAuth) {\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <LoginReduxForm onSubmit={onSubmit} captchaUrl={captchaUrl}/>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n        captchaUrl: state.auth.captchaUrl,\r\n        isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default connect (mapStateToProps, {login})(Login);","import {Redirect} from \"react-router-dom\";\r\nimport React, {ComponentType, Suspense} from \"react\";\r\nimport {AppStateType} from \"../Redux/redux_store\";\r\nimport {connect} from \"react-redux\";\r\nimport Preloader from \"../Components/common/Preloader/Preloader\";\r\n\r\ntype MapStatePropsForRedirectType = {\r\n    isAuth: boolean\r\n};\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType): MapStatePropsForRedirectType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n};\r\n\r\nexport function withSuspense <T>(Component: ComponentType<T>) {\r\n    return (props: any) => {\r\n        return <Suspense fallback={<Preloader/>}>\r\n            <Component {...props}/>\r\n            </Suspense>\r\n    }\r\n    const RedirectComponent = (props: MapStatePropsForRedirectType) => {\r\n        let {isAuth, ...restProps} = props\r\nconsole.log(isAuth)\r\n        if (!isAuth) return <Redirect to={\"/login\"}/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n    const ConnectRedirectComponent = connect (mapStateToPropsForRedirect)(RedirectComponent)\r\n    return ConnectRedirectComponent\r\n}\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Navbar from \"./Components/Navbar/Navbar\";\r\nimport {Route, withRouter} from \"react-router-dom\";\r\nimport News from \"./Components/News/News\";\r\nimport Music from \"./Components/Music/Music\";\r\nimport Settings from \"./Components/Settings/Settings\";\r\nimport UsersContainer from \"./Components/Users/UsersContainer\";\r\nimport HeaderContainer from \"./Components/Header/HeaderContainer\";\r\nimport Login from \"./Components/Login/Login\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport {initializeApp} from \"./Redux/app_reducer\";\r\nimport {AppStateType} from \"./Redux/redux_store\";\r\nimport Preloader from \"./Components/common/Preloader/Preloader\";\r\nimport {withSuspense} from \"./hoc/WithSuspense\";\r\n\r\nconst DialogsContainer = React.lazy(() =>\r\n    import(\"./Components/Dialogs/DialogsContainer\"));\r\nconst ProfileContainer = React.lazy(() =>\r\n    import(\"./Components/Profile/ProfileContainer\"));\r\n\r\ntype AppPropsType = {\r\n    getAuthUserData: () => void\r\n    initializeApp: () => void\r\n    initialized: boolean\r\n\r\n}\r\n\r\nclass App extends React.Component<AppPropsType> {\r\n    catchAllUnhandledErrors = (e: PromiseRejectionEvent) => {\r\n    // alert(\"Some error occured\");\r\n    // console.error(e);\r\n}\r\n    componentDidMount() {\r\n        this.props.initializeApp();\r\n        window.addEventListener(\"unhandledrejection\",\r\n            this.catchAllUnhandledErrors);\r\n    }\r\n    componentWillUnmount(){\r\n        window.removeEventListener(\"unhandledrejection\",\r\n            this.catchAllUnhandledErrors);\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.initialized) {\r\n            return <Preloader/>\r\n        }\r\n        return (\r\n\r\n            <div className='app-wrapper'>\r\n                <HeaderContainer getAuthUserData={this.props.getAuthUserData}/>\r\n                <Navbar/>\r\n                <div className='app-wrapper-content'>\r\n                    <Route\r\n                        exact path='/'\r\n                        render={withSuspense(ProfileContainer)}/>\r\n                    <Route\r\n                        path='/dialogs'\r\n                        render={withSuspense(DialogsContainer)}/>\r\n                    <Route\r\n                        path='/profile/:userId?'\r\n                        render={withSuspense(ProfileContainer)}/>\r\n                    <Route\r\n                        path='/users'\r\n                        render={() => <UsersContainer/>}/>\r\n                    <Route\r\n                        path='/login'\r\n                        render={() => <Login/>}/>\r\n                    <Route\r\n                        path='*'\r\n                        render={() => <div>404. Page not found</div>}/>\r\n                    <Route path='/news' component={News}/>\r\n                    <Route path='/music' component={Music}/>\r\n                    <Route path='/settings' component={Settings}/>\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    initialized: state.app.initialized\r\n})\r\n\r\nexport default compose<React.ComponentType>\r\n(withRouter, connect(mapStateToProps, {initializeApp}))(App);\r\n","import React from 'react';\r\nimport './index.css';\r\nimport store from \"./Redux/redux_store\";\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport {Provider} from \"react-redux\";\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <HashRouter>\r\n            <App/>\r\n        </HashRouter>\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"friendImage\":\"Friends_friendImage__2ur65\",\"friendsItem\":\"Friends_friendsItem__M9EZo\"};","export default __webpack_public_path__ + \"static/media/__Iphone-spinner-1.4c0dabf6.gif\";","import preloader from \"../../../assets/images/__Iphone-spinner-1.gif\";\r\nimport React from \"react\";\r\n\r\nlet Preloader = () => {\r\nreturn <div style={{backgroundColor: 'white'}}>\r\n    <img src={preloader} />\r\n</div>\r\n};\r\n\r\nexport default  Preloader;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControls_formControl__2QgKX\",\"error\":\"FormControls_error__2_LPe\",\"formSummaryError\":\"FormControls_formSummaryError__1dwrP\"};","\r\nexport type FieldValidatorType = (value: string) => string | undefined\r\nexport const required: FieldValidatorType = (value) => {\r\n    if (value) return undefined;\r\n    return 'Field is required';\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__Wdf7z\",\"pageNumber\":\"Paginator_pageNumber__2jWfT\",\"selectedPage\":\"Paginator_selectedPage__2hSRp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2iji8\",\"loginBlock\":\"Header_loginBlock__3E4vK\"};","import {PhotosType, PostType, ProfilePageType, ProfileType} from \"./Store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {profileAPI, usersAPI} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {AppStateType} from \"./redux_store\";\r\n\r\nconst ADD_POST = \"ADD-POST\";\r\nconst SET_USER_PROFILE = \"SET-USER-PROFILE\";\r\nconst SET_USER_STATUS = \"SET_USER_STATUS\";\r\nconst SAVE_PHOTO_SUCCESS = \"SAVE_PHOTO_SUCCESS\"\r\n\r\nexport type ProfileActionsType =\r\n    ReturnType<typeof addPostActionCreator> |\r\n    ReturnType<typeof setUserProfile> |\r\n    ReturnType<typeof setUserStatus> |\r\n    ReturnType<typeof savePhotoSuccess>\r\n\r\nlet initialState: ProfilePageType = {\r\n    posts: [\r\n        {id: 1, message: \"Hi, how are you?\", likesCount: 12},\r\n        {id: 2, message: \"It's my first post\", likesCount: 11},\r\n        {id: 3, message: \"Blabla\", likesCount: 5},\r\n        {id: 4, message: \"Dadada\", likesCount: 14}\r\n    ],\r\n    profile: null,\r\n    status: \"\"\r\n};\r\n\r\nconst profileReducer = (state = initialState, action: ProfileActionsType): ProfilePageType => {\r\n    switch (action.type) {\r\n        case ADD_POST:\r\n            const newPost: PostType = {\r\n                id: new Date().getTime(),\r\n                message: action.newPostText,\r\n                likesCount: 0\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost]\r\n            };\r\n        case SET_USER_PROFILE: {\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        }\r\n        case SET_USER_STATUS: {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        }\r\n        case SAVE_PHOTO_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                profile: {...state.profile, photos: action.photos} as ProfileType\r\n            }\r\n        }\r\n\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\nexport const addPostActionCreator = (newPostText: string) => {\r\n    return {\r\n        type: ADD_POST,\r\n        newPostText\r\n    } as const\r\n}\r\nexport const setUserProfile = (profile: ProfileType) => {\r\n    return {\r\n        type: SET_USER_PROFILE,\r\n        profile\r\n    } as const\r\n}\r\n\r\nexport const setUserStatus = (status: string) => {\r\n    return {\r\n        type: SET_USER_STATUS,\r\n        status\r\n    } as const\r\n}\r\nexport const savePhotoSuccess = (photos: PhotosType) => {\r\n    return {\r\n        type: SAVE_PHOTO_SUCCESS,\r\n        photos\r\n    } as const\r\n}\r\n\r\nexport const getUserProfile = (userId: number) => async (dispatch: Dispatch) => {\r\n    let response = await usersAPI.getProfile(userId)\r\n\r\n    dispatch(setUserProfile(response.data));\r\n}\r\n\r\nexport const getUserStatus = (userId: number) => async (dispatch: Dispatch) => {\r\n\r\n    let response = await profileAPI.getStatus(userId)\r\n    dispatch(setUserStatus(response.data));\r\n}\r\n\r\nexport const updateUserStatus = (status: string) => async (dispatch: Dispatch) => {\r\n    try {\r\n        let response = await profileAPI.updateStatus(status)\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(setUserStatus(status));\r\n        }\r\n    } catch (error) {\r\n\r\n    }\r\n}\r\n\r\nexport const savePhoto = (file: File) => async (dispatch: Dispatch) => {\r\n    let response = await profileAPI.savePhoto(file)\r\n\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(savePhotoSuccess(response.data.data.photos));\r\n\r\n    }\r\n}\r\n\r\nexport const saveProfile = (profile: ProfileType) => async (dispatch: any, getState: () => AppStateType) => {\r\n    const userId = getState().auth.id;\r\n    const response = await profileAPI.saveProfile(profile)\r\n\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(getUserProfile(userId!));\r\n        dispatch(stopSubmit(\"edit-profile\", {_error: response.data.messages[0]}))\r\n        return Promise.reject(response.data.messages[0]);\r\n    }\r\n}\r\n\r\nexport default profileReducer"],"sourceRoot":""}