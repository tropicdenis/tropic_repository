{"version":3,"sources":["Redux/DialogsReducer.tsx","Components/Users/users.module.css","Components/Navbar/Navbar.module.css","api/api.ts","Redux/FriendsReducer.tsx","utils/object-helper.ts","Redux/UsersReducer.tsx","Redux/auth_reducer.ts","Redux/app_reducer.ts","Redux/redux_store.ts","Components/Friends/Friends.tsx","Components/Navbar/Navbar.tsx","Components/News/News.tsx","Components/Music/Music.tsx","Components/Settings/Settings.tsx","Components/common/Paginator/Paginator.tsx","assets/images/user-avatar.jpg","Components/Users/User.tsx","Components/Users/Users.tsx","assets/images/__Iphone-spinner-1.gif","Components/common/Preloader/Preloader.tsx","Redux/users_selectors.ts","Components/Users/UsersContainer.tsx","Components/Header/Header.tsx","Components/Header/HeaderContainer.tsx","Components/Login/Login.tsx","hoc/WithSuspense.tsx","App.tsx","index.tsx","Components/common/FormsControls/FormsControls.tsx","Components/Friends/Friends.module.css","Components/common/FormsControls/FormControls.module.css","Components/common/Paginator/Paginator.module.css","utils/validators/validators.tsx","Components/Header/Header.module.css","Redux/ProfileReducer.tsx"],"names":["SEND_MESSAGE","initialState","messages","id","message","dialogs","name","sendMessageActionCreator","newMessageBody","type","dialogsReducer","state","action","body","Date","getTime","module","exports","instance","axios","create","withCredentials","baseURL","headers","usersAPI","getUsers","currentPage","pageSize","get","then","response","data","follow","userId","post","unfollow","delete","getProfile","console","warn","profileAPI","getStatus","updateStatus","status","put","authAPI","me","login","email","password","rememberMe","captcha","logout","avatarURL","friendsReducer","updateObjectIbArray","items","itemId","objPropName","newObjProps","map","u","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","users","totalUsersCount","isFetching","folowingInProgress","followUnfollowFlow","dispatch","apiMethod","actionCreator","a","toggleIsFollowingProgress","resultCode","followSuccess","unfollowSuccess","setCurrentPage","toggleIsFetching","usersReducer","followed","count","filter","SET_USER_DATA","isAuth","setAuthUserData","payload","getAuthUserData","authReducer","INITIALIZED_SUCCESS","initialized","appReducer","rootReducer","combineReducers","profilePage","profileReducer","dialogsPage","friends","usersPage","auth","form","formReducer","app","middlewareEnhancer","applyMiddleware","thunkMiddleware","composedEnhancers","compose","store","createStore","connect","props","className","s","friendsItem","friendImage","src","Navbar","nav","item","to","activeClassName","activeLink","active","News","Music","Settings","Paginator","totalItemsCount","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","styles","paginator","onClick","p","cn","selectedPage","pageNumber","event","User","user","photos","small","userPhoto","disabled","some","Users","Preloader","style","backgroundColor","preloader","createSelector","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersContainer","this","React","Component","bind","totalCount","Header","header","loginBlock","HeaderContainer","LoginReduxForm","reduxForm","handleSubmit","error","onSubmit","createField","required","Input","formSummaryError","length","stopSubmit","_error","formData","withSuspense","fallback","DialogsContainer","lazy","ProfileContainer","App","initializeApp","path","render","component","withRouter","promise","Promise","all","ReactDOM","document","getElementById","FormControl","input","meta","touched","children","hasError","formControl","Textarea","restProps","placeholder","validators","text","validate","value","maxLengthCreator","maxLength","lehgth","ADD_POST","SET_USER_PROFILE","SET_USER_STATUS","posts","likesCount","profile","addPostActionCreator","newPostText","getUserProfile","getUserStatus","updateUserStatus","newPost"],"mappings":"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","file":"static/js/main.9b6dcee0.chunk.js","sourcesContent":["\r\nconst SEND_MESSAGE = \"SEND-MESSAGE\";\r\nexport type DialogsActionsType = ReturnType<typeof sendMessageActionCreator>\r\n\r\n\r\nexport type DialogType = {\r\n    name: string,\r\n    id: number\r\n}\r\nexport type MessageType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\nlet initialState = {\r\n    messages: [\r\n        {id: 1, message: \"Hi\"},\r\n        {id: 2, message: \"How is your it-kamasutra\"},\r\n        {id: 3, message: \"Yo\"},\r\n        {id: 4, message: \"Yo\"},\r\n        {id: 5, message: \"Yo\"},\r\n    ] as Array<MessageType>,\r\n    dialogs: [\r\n        {id: 1, name: \"Dimych\"},\r\n        {id: 2, name: \"Andrey\"},\r\n        {id: 3, name: \"Sveta\"},\r\n        {id: 4, name: \"Sasha\"},\r\n        {id: 5, name: \"Viktor\"},\r\n        {id: 6, name: \"Valera\"},\r\n    ] as Array<DialogType>\r\n}\r\n\r\nexport type InitialDialogsType = typeof initialState\r\n\r\nconst dialogsReducer = (state:InitialDialogsType = initialState, action: ActionsType):InitialDialogsType => {\r\n\r\n    switch (action.type) {\r\n        case SEND_MESSAGE:\r\n            let body = action.newMessageBody\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: new Date().getTime(), message: body}]\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const sendMessageActionCreator = (newMessageBody: string) => {\r\n    return {\r\n        type: SEND_MESSAGE,\r\n        newMessageBody\r\n    } as const\r\n}\r\n\r\ntype ActionsType = ReturnType<typeof  sendMessageActionCreator>\r\n\r\nexport default dialogsReducer","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"users_userPhoto__2YEZf\",\"selectedPage\":\"users_selectedPage__pTmL_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__6rBKB\",\"item\":\"Navbar_item__1mcrh\",\"activeLink\":\"Navbar_activeLink__3Kabo\"};","import axios from \"axios\";\r\nimport {FormDataType} from \"../Components/Login/Login\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: `https://social-network.samuraijs.com/api/1.0/`,\r\n    headers: {\r\n        \"API-KEY\": \"5ce17daa-8642-4a76-b5a3-3d919299f84b\"\r\n    }\r\n})\r\n\r\nexport const usersAPI = {\r\n    getUsers (currentPage: number = 1, pageSize: number = 10) {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => {\r\n                return response.data\r\n            });\r\n    },\r\n    follow(userId: number) {\r\n        return instance.post(`follow/${userId}`)\r\n    },\r\n    unfollow(userId: number) {\r\n        return instance.delete(`follow/${userId}`\r\n            )\r\n    },\r\n    getProfile(userId: number) {\r\n        console.warn('Obsolete method. Please use profileAPI object')\r\n        return profileAPI.getProfile(userId);\r\n    }\r\n};\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: number) {\r\n        return instance.get(`profile/` + userId);\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get(`profile/status/` + userId);\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put(`profile/status`, {status: status});\r\n    }\r\n};\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get(`auth/me`)\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean = false) {\r\n        return instance.post(`auth/login`, {email, password, rememberMe, captcha: false})\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`);\r\n    },\r\n\r\n}\r\n\r\n\r\n","import {ActionsType, FriendType} from \"./Store\";\r\n\r\nlet initialState: Array<FriendType> = [\r\n     {\r\n          name: \"Garry\",\r\n          avatarURL: \"https://nick-intl.mtvnimages.com/uri/mgid:file:gsp:kids-assets:/nick/properties/spongebob-squarepants/characters/gary-character-web-desktop.png?height=0&width=480&matte=true&crop=false\"\r\n     },\r\n     {name: \"Patrick\", avatarURL: \"https://upload.wikimedia.org/wikipedia/ru/4/4e/Patrick_star-4854.jpg\"},\r\n     {name: \"Squidi\", avatarURL: \"https://www.meme-arsenal.com/memes/8ba9362a677fe74c4e7af0feaeef2360.jpg\"}\r\n]\r\n\r\nconst friendsReducer = (state = initialState, action:ActionsType) => {\r\n     return state\r\n}\r\n\r\n\r\n\r\nexport default friendsReducer","export const updateObjectIbArray = (items: Array<any>, itemId: string, objPropName: string, newObjProps: {[key: string]: any}) => {\r\n    return items.map(u => {\r\n        if (u[objPropName] === itemId) {\r\n            return {...u, ...newObjProps}\r\n        }\r\n        return u;\r\n    })\r\n}","import {ActionsType} from \"./Store\";\r\nimport {usersAPI} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {updateObjectIbArray} from \"../utils/object-helper\";\r\n\r\ntype PhotosType = {\r\n    small: string\r\n    large: string\r\n}\r\nexport type UserType = {\r\n    id: number\r\n    photos: PhotosType\r\n    followed: boolean\r\n    fullName: string\r\n    name: string\r\n    status: string\r\n}\r\n\r\nexport type InitialStateType = {\r\n    users: Array<UserType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    folowingInProgress: Array<number>\r\n}\r\n\r\nconst FOLLOW = 'FOLLOW';\r\nconst UNFOLLOW = 'UNFOLLOW';\r\nconst SET_USERS = 'SET_USERS';\r\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\r\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT';\r\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING';\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS'\r\n\r\nlet initialState: InitialStateType = {\r\n    users: [] as Array<UserType>,\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    folowingInProgress: []\r\n};\r\n\r\nexport type UsersActionsType =\r\n    ReturnType<typeof follow>\r\n    | ReturnType<typeof unfollow>\r\n    | ReturnType<typeof setUsers>\r\n    | ReturnType<typeof setCurrentPage>\r\n    | ReturnType<typeof setTotalUsersCount>\r\n    | ReturnType<typeof toggleIsFetching>\r\n    | ReturnType<typeof toggleIsFollowingProgress>\r\n\r\nconst usersReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: updateObjectIbArray(state.users, action.userId, \"id\", {followed: true})\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: updateObjectIbArray(state.users, action.userId, \"id\", {followed: false})\r\n            }\r\n        case SET_USERS:\r\n            return {\r\n                ...state,\r\n                users: [...action.users]\r\n            }\r\n        case SET_CURRENT_PAGE:\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            }\r\n        case SET_TOTAL_USERS_COUNT:\r\n            return {\r\n                ...state,\r\n                totalUsersCount: action.count\r\n            }\r\n        case TOGGLE_IS_FETCHING:\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS:\r\n            return {\r\n                ...state,\r\n                folowingInProgress: action.isFetching\r\n                    ? [...state.folowingInProgress, action.userId]\r\n                    : state.folowingInProgress.filter(id => id !== action.userId)\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const followUnfollowFlow = async (dispatch: Dispatch, userId: number, apiMethod: any, actionCreator: any) => {\r\n    dispatch(toggleIsFollowingProgress(true, userId))\r\n    let response = await apiMethod(userId)\r\n\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(actionCreator(userId));\r\n    }\r\n    dispatch(toggleIsFollowingProgress(false, userId))\r\n\r\n}\r\n\r\nexport const followSuccess = (userId: number) => {\r\n    return {\r\n        type: FOLLOW,\r\n        userId\r\n    } as const\r\n}\r\nexport const unfollowSuccess = (userId: number) => {\r\n    return {\r\n        type: UNFOLLOW,\r\n        userId\r\n    } as const\r\n}\r\nexport const setUsers = (users: Array<UserType>) => {\r\n    return {\r\n        type: SET_USERS,\r\n        users\r\n    } as const\r\n}\r\nexport const setCurrentPage = (currentPage: number) => {\r\n    return {\r\n        type: SET_CURRENT_PAGE,\r\n        currentPage: currentPage\r\n    } as const\r\n}\r\nexport const setTotalUsersCount = (totalUsersCount: number) => {\r\n    return {\r\n        type: SET_TOTAL_USERS_COUNT,\r\n        count: totalUsersCount\r\n    } as const\r\n}\r\nexport const toggleIsFetching = (isFetching: boolean) => {\r\n    return {\r\n        type: TOGGLE_IS_FETCHING,\r\n        isFetching\r\n    } as const\r\n}\r\nexport const toggleIsFollowingProgress = (isFetching: boolean, userId: number) => {\r\n    return {\r\n        type: TOGGLE_IS_FOLLOWING_PROGRESS,\r\n        isFetching,\r\n        userId\r\n    } as const\r\n}\r\n\r\nexport const requestUsers = (currentPage: number, pageSize: number) => {\r\n    return async (dispatch: Dispatch) => {\r\n        dispatch(toggleIsFetching(true));\r\n        dispatch(setCurrentPage(currentPage));\r\n\r\n        let data = await usersAPI.getUsers(currentPage, pageSize)\r\n\r\n        dispatch(toggleIsFetching(false));\r\n        dispatch(setUsers(data.items));\r\n        dispatch(setTotalUsersCount(data.totalCount));\r\n\r\n    }\r\n}\r\n\r\nexport const follow = (userId: number) => {\r\n    return async (dispatch: Dispatch) => {\r\n        followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), followSuccess)\r\n    }\r\n}\r\n\r\nexport const unfollow = (userId: number) => {\r\n    return async (dispatch: Dispatch) => {\r\n        followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), unfollowSuccess)\r\n    }\r\n}\r\n\r\nexport default usersReducer","import {authAPI} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {ThunkAction, ThunkDispatch} from \"redux-thunk\";\r\nimport {AppStateType} from \"./redux_store\";\r\n\r\ntype InitialStateType = {\r\n    id: number | null\r\n    email: string | null\r\n    login: string | null\r\n    isAuth: boolean\r\n}\r\n\r\nconst SET_USER_DATA = 'samurai-network/auth/SET_USER_DATA';\r\n\r\nlet initialState: InitialStateType = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false\r\n};\r\n\r\ntype ActionsType = ReturnType<typeof setAuthUserData>;\r\n\r\nconst authReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                // ...action.payload\r\n                id: action.payload.userId,\r\n                email: action.payload.email,\r\n                login: action.payload.login,\r\n                isAuth: true\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const setAuthUserData = (userId: number | null, email: string | null, login: string | null, isAuth: boolean) => {\r\n    return {\r\n        type: SET_USER_DATA,\r\n        payload: {userId, login, email, isAuth}\r\n    } as const\r\n};\r\n\r\nexport const getAuthUserData = (): ThunkType => async (dispatch: ThunkDispatchType) => {\r\n    let response = await authAPI.me()\r\n\r\n    if (response.data.resultCode === 0) {\r\n        let {id, email, login} = response.data.data\r\n        dispatch(setAuthUserData(id, email, login, true));\r\n    }\r\n}\r\n\r\n\r\ntype ThunkType = ThunkAction<void, AppStateType, unknown, ActionsType>\r\n\r\ntype ThunkDispatchType = ThunkDispatch<AppStateType, unknown, ActionsType>\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean = false) => async (dispatch: ThunkDispatchType) => {\r\n    let response = await authAPI.login(email, password, rememberMe = false)\r\n\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(getAuthUserData());\r\n    } else {\r\n        let message = response.data.messages.length > 0 ?\r\n            response.data.messages[0]\r\n            : \"Some error\"\r\n        dispatch(stopSubmit(\"login\", {_error: \"Common error\"}) as ActionsType);\r\n    }\r\n\r\n}\r\n\r\nexport const logout = (): ThunkType => async (dispatch: ThunkDispatchType) => {\r\n    let response = await authAPI.logout()\r\n\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(setAuthUserData(null, null, null, false));\r\n            }\r\n\r\n}\r\n\r\nexport default authReducer;","import {Dispatch} from \"redux\";\r\nimport {getAuthUserData, setAuthUserData} from \"./auth_reducer\";\r\nimport {ThunkAction, ThunkDispatch} from \"redux-thunk\";\r\nimport {AppStateType} from \"./redux_store\";\r\n\r\ntype InitialStateType = {\r\n    initialized: boolean\r\n}\r\n\r\nconst INITIALIZED_SUCCESS = 'INITIALIZED_SUCCESS';\r\n\r\nlet initialState: InitialStateType = {\r\n    initialized: false\r\n};\r\n\r\ntype ActionsType = ReturnType<typeof initializedSuccess>;\r\n\r\nconst appReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case INITIALIZED_SUCCESS:\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const initializedSuccess = () => {\r\n    return {\r\n        type: INITIALIZED_SUCCESS\r\n    } as const\r\n};\r\n\r\ntype ThunkType = ThunkAction<void, AppStateType, unknown, ActionsType>\r\n\r\ntype ThunkDispatchType = ThunkDispatch<AppStateType, unknown, ActionsType>\r\n\r\nexport const initializeApp = ():ThunkType => (dispatch: ThunkDispatchType) => {\r\n    let promise = dispatch(getAuthUserData());\r\n    Promise.all([promise])\r\n        .then(() => {\r\n            dispatch(initializedSuccess());\r\n        })\r\n}\r\n\r\nexport default appReducer;","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport profileReducer from \"./ProfileReducer\";\r\nimport dialogsReducer from \"./DialogsReducer\";\r\nimport friendsReducer from \"./FriendsReducer\";\r\nimport usersReducer from \"./UsersReducer\";\r\nimport authReducer from \"./auth_reducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {reducer as formReducer} from \"redux-form\";\r\nimport appReducer from \"./app_reducer\";\r\n\r\n\r\nlet rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    friends: friendsReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer\r\n});\r\n\r\n\r\nconst middlewareEnhancer = applyMiddleware(thunkMiddleware)\r\nconst composedEnhancers = compose(middlewareEnhancer)\r\n\r\nconst store = createStore(rootReducer, composedEnhancers);\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\n\r\nexport default store;","import React from \"react\";\r\nimport s from './Friends.module.css'\r\nimport {FriendType} from \"../../Redux/Store\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../Redux/redux_store\";\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    friends: FriendType[]\r\n}\r\n\r\nexport const Friends = (props: MapStateToPropsType) => {\r\n    return (\r\n        <div>\r\n            <h2>Friends</h2>\r\n            <div className={s.friendsItem}>\r\n                <img className={s.friendImage}\r\n                     src={props.friends[0].avatarURL}/>\r\n                <p>{props.friends[0].name}</p>\r\n            </div >\r\n            <div className={s.friendsItem}>\r\n                <img className={s.friendImage}\r\n                     src={props.friends[1].avatarURL}/>\r\n                <p>{props.friends[1].name}</p>\r\n            </div>\r\n            <div className={s.friendsItem}>\r\n                <img className={s.friendImage}\r\n                     src={props.friends[2].avatarURL}/>\r\n                <p>{props.friends[2].name}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType ): MapStateToPropsType => {\r\n    return {\r\n        friends: state.friends\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {})(Friends)","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from './Navbar.module.css';\r\nimport Friends from \"../Friends/Friends\";\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={s.item}>\r\n                <NavLink to={\"/profile\"} activeClassName={s.activeLink}>Profile</NavLink>\r\n            </div>\r\n            <div className={`${s.item} ${s.active}`}>\r\n                <NavLink to={\"/dialogs\"} activeClassName={s.activeLink}>Messages</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to={\"/news\"} activeClassName={s.activeLink}>News</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to={\"/music\"} activeClassName={s.activeLink}>Music</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to={\"/settings\"} activeClassName={s.activeLink}>Settings</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to={\"/users\"} activeClassName={s.activeLink}>Users</NavLink>\r\n            </div>\r\n            <Friends />\r\n        </nav>\r\n\r\n    );\r\n}\r\n\r\n\r\nexport default Navbar","import React from \"react\";\r\nimport s from './News.module.css';\r\n\r\nconst News = () => {\r\n    return (\r\n        <div >\r\n            News\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default News","import React from \"react\";\r\nimport s from './Music.module.css';\r\n\r\nconst Music = () => {\r\n    return (\r\n        <div >\r\n            Music\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Music","import React from \"react\";\r\n\r\nconst Settings = () => {\r\n    return (\r\n        <div >\r\n            Settings\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Settings","import React, {useState} from \"react\";\r\nimport styles from \"./Paginator.module.css\";\r\nimport cn from \"classnames\";\r\n\r\ntype PropsType = {\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (page: number) => void\r\n    portionSize: number\r\n}\r\n\r\nlet Paginator = ({totalItemsCount, pageSize, currentPage, onPageChanged, portionSize = 10}: PropsType) => {\r\n\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize);\r\n\r\n    let pages = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize);\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n    return (\r\n        <div className={styles.paginator}>\r\n            { portionNumber > 1 &&\r\n            <button onClick={() => {\r\n                setPortionNumber(portionNumber - 1)\r\n            }}>PREV</button>}\r\n\r\n            {pages\r\n                .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n                .map(p => {\r\n                    return <span className={cn({\r\n                        [styles.selectedPage]: currentPage === p\r\n                    }, styles.pageNumber)}\r\n                                 key={p}\r\n                                 onClick={(event) => {\r\n                                     onPageChanged(p)\r\n                                 }}>{p}</span>\r\n                })}\r\n            {portionCount > portionNumber &&\r\n            <button onClick={() => {\r\n                setPortionNumber(portionNumber + 1)\r\n            }}>NEXT</button>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Paginator","export default __webpack_public_path__ + \"static/media/user-avatar.60b92e78.jpg\";","import React from \"react\";\r\nimport styles from \"./users.module.css\";\r\nimport userPhoto from \"../../assets/images/user-avatar.jpg\";\r\nimport {NavLink} from 'react-router-dom';\r\nimport {UserType} from \"../../Redux/UsersReducer\";\r\n\r\ntype PropsType = {\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (page: number) => void\r\n    users: Array<UserType>\r\n    unfollow: (userId: number) => void\r\n    follow: (userId: number) => void\r\n    folowingInProgress: Array<number>\r\n}\r\nlet User = ({user, folowingInProgress, unfollow, follow}: any) => {\r\n    return (\r\n        <div key={user.id}>\r\n            <span>\r\n                <div>\r\n                    <NavLink to={'/profile/' + user.id}>\r\n                        <img src={user.photos.small !== null ? user.photos.small : userPhoto}\r\n                             className={styles.userPhoto}/>\r\n                    </NavLink>\r\n                </div>\r\n                <div>\r\n                    {user.followed\r\n                        ? <button disabled={folowingInProgress.some((id: number) => +id === user.id)} onClick={() => {\r\n                            unfollow(user.id);\r\n                        }}>Unfollow</button>\r\n                        : <button disabled={folowingInProgress.some((id: number) => +id === user.id)} onClick={() => {\r\n                            follow(user.id)\r\n                        }}>Follow</button>\r\n                    }\r\n                </div>\r\n            </span>\r\n            <span>\r\n                    <span>\r\n                        <div>{user.name}</div>\r\n                        <div>{user.status}</div>\r\n                    </span>\r\n                    <span>\r\n                        <div>{\"user.location.country\"}</div>\r\n                    <   div>{\"user.location.city\"}</div>\r\n                    </span>\r\n            </span>\r\n        </div>)\r\n}\r\n\r\nexport default User","import React from \"react\";\r\nimport {UserType} from \"../../Redux/UsersReducer\";\r\nimport Paginator from \"../common/Paginator/Paginator\";\r\nimport User from \"./User\";\r\n\r\ntype PropsType = {\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (page: number) => void\r\n    users: Array<UserType>\r\n    unfollow: (userId: number) => void\r\n    follow: (userId: number) => void\r\n    folowingInProgress: Array<number>\r\n    portionSize: number\r\n}\r\nlet Users = ({totalItemsCount, pageSize, currentPage, onPageChanged, users,portionSize, ...props}: PropsType) => {\r\n\r\n    return (\r\n        <div>\r\n            <Paginator totalItemsCount={totalItemsCount} currentPage={currentPage}\r\n                       onPageChanged={onPageChanged} pageSize={pageSize} portionSize={portionSize}/>\r\n\r\n            {\r\n                users.map(u => <User user={u} folowingInProgress={props.folowingInProgress}\r\n                                     follow={props.follow} unfollow={props.unfollow} key={u.id}\r\n                />)\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Users","export default __webpack_public_path__ + \"static/media/__Iphone-spinner-1.4c0dabf6.gif\";","import preloader from \"../../../assets/images/__Iphone-spinner-1.gif\";\r\nimport React from \"react\";\r\n\r\nlet Preloader = () => {\r\nreturn <div style={{backgroundColor: 'white'}}>\r\n    <img src={preloader} />\r\n</div>\r\n};\r\n\r\nexport default  Preloader;","import {AppStateType} from \"./redux_store\";\r\nimport {createSelector} from \"reselect\";\r\n\r\nconst getUsersSelector = (state: AppStateType) => {\r\n    return state.usersPage.users;\r\n}\r\n\r\nexport const getUsers = createSelector(getUsersSelector,(users) => {\r\n        return users.filter(u => true);\r\n    }\r\n)\r\n\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return state.usersPage.pageSize;\r\n}\r\n\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n    return state.usersPage.totalUsersCount;\r\n}\r\n\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n    return state.usersPage.currentPage;\r\n}\r\n\r\nexport const getIsFetching = (state: AppStateType) => {\r\n    return state.usersPage.isFetching;\r\n}\r\n\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n    return state.usersPage.folowingInProgress;\r\n}","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    follow,\r\n    requestUsers,\r\n    setCurrentPage,\r\n    toggleIsFollowingProgress,\r\n    unfollow,\r\n    UserType\r\n} from \"../../Redux/UsersReducer\";\r\nimport {AppStateType} from \"../../Redux/redux_store\";\r\nimport Users from \"./Users\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport {compose} from \"redux\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsers\r\n} from \"../../Redux/users_selectors\";\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    users: Array<UserType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    folowingInProgress: Array<number>\r\n}\r\n\r\nexport type UsersPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nclass UsersContainer extends React.Component<UsersPropsType> {\r\n    componentDidMount() {\r\n        this.props.getUsers(this.props.currentPage, this.props.pageSize);\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        this.props.setCurrentPage(pageNumber);\r\n\r\n        this.props.getUsers(pageNumber, this.props.pageSize);\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        return <>\r\n            {this.props.isFetching ? <Preloader/> : null}\r\n            <Users totalItemsCount={this.props.totalUsersCount}\r\n                   pageSize={this.props.pageSize}\r\n                   currentPage={this.props.currentPage}\r\n                   onPageChanged={this.onPageChanged}\r\n                   users={this.props.users}\r\n                   follow={this.props.follow}\r\n                   unfollow={this.props.unfollow}\r\n                   folowingInProgress={this.props.folowingInProgress}\r\n                   portionSize={10}\r\n            />\r\n        </>\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n        return {\r\n            users: getUsers(state),\r\n            pageSize: getPageSize(state),\r\n            totalUsersCount: getTotalUsersCount(state),\r\n            currentPage: getCurrentPage(state),\r\n            isFetching: getIsFetching(state),\r\n            folowingInProgress: getFollowingInProgress(state)\r\n\r\n\r\n        }\r\n    }\r\n;\r\n\r\n\r\ntype MapDispatchToPropsType =\r\n    {\r\n        follow: (userId: number) => void\r\n        unfollow: (userId: number) => void\r\n        setCurrentPage: (pageNumber: number) => void\r\n        toggleIsFollowingProgress: (isFetching: boolean, userId: number) => void\r\n        getUsers: (currentPage: number, pageSize: number) => void\r\n    }\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect<MapStateToPropsType, MapDispatchToPropsType, {}, AppStateType>(mapStateToProps, {\r\n        follow, unfollow, setCurrentPage, toggleIsFollowingProgress, getUsers: requestUsers\r\n    })\r\n)(UsersContainer)","import React from 'react';\r\nimport s from './Header.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype HeaderPropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n    logout: () => void\r\n}\r\n\r\nconst Header = (props: HeaderPropsType) => {\r\n    return(\r\n        <header className={s.header}>\r\n            <img src={'https://upload.wikimedia.org/wikipedia/commons/thumb/e/e5/NASA_logo.svg/1024px-NASA_logo.svg.png'}/>\r\n            <div className={s.loginBlock}>\r\n                {props.isAuth ? <NavLink to={'/profile/16100'}>{props.login}\r\n                <button onClick={()=>props.logout()}>Log out</button> </NavLink>\r\n                    :<NavLink to={'/login'}>Login</NavLink>\r\n                }\r\n            </div>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header","import React from 'react';\r\nimport Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../Redux/redux_store\";\r\nimport {logout} from \"../../Redux/auth_reducer\";\r\n\r\ntype HeaderContainerType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n    logout: () => void\r\n    getAuthUserData: () => void\r\n}\r\n\r\nclass HeaderContainer extends React.Component<HeaderContainerType, any> {\r\n\r\n    render() {\r\n        return (\r\n            <Header\r\n                {...this.props}\r\n            />\r\n        );\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login\r\n});\r\n\r\nexport default connect(mapStateToProps, {logout})(HeaderContainer)","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, Input} from \"../common/FormsControls/FormsControls\";\r\nimport {required} from \"../../utils/validators/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../Redux/auth_reducer\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport style from './../common/FormsControls/FormControls.module.css';\r\nimport {AppStateType} from \"../../Redux/redux_store\";\r\n\r\nexport type FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<FormDataType>> = ({handleSubmit, error}) => {\r\n    return (\r\n            <form onSubmit={handleSubmit}>\r\n                    {createField(\"Email\", \"email\", [required], Input)}\r\n                    {createField(\"Password\", \"password\", [required], Input, {type:\"password\"})}\r\n                    {createField(null, \"rememberMe\", [], Input, {type: \"checkbox\"}, \"remember me\")}\r\n\r\n                {error && <div className={style.formSummaryError}>\r\n                    {error}\r\n                </div> }\r\n                <div>\r\n                    <button>Login</button>\r\n                </div>\r\n            </form>\r\n    )\r\n};\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType>({form: 'login'})(LoginForm);\r\n\r\ntype LoginPropsType = {\r\n    isAuth: boolean\r\n    login: (email: string, password: string, rememberMe: boolean) => void\r\n}\r\n\r\nconst Login = (props: LoginPropsType) => {\r\n    const onSubmit = (formData: FormDataType) => {\r\n            props.login(formData.email, formData.password, formData.rememberMe);\r\n    }\r\n    debugger\r\n\r\n    if (props.isAuth) <Redirect to={\"/profile\"} />\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <LoginReduxForm onSubmit={onSubmit}/>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n        isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default connect (mapStateToProps, {login})(Login);","import {Redirect} from \"react-router-dom\";\r\nimport React, {ComponentType, Suspense} from \"react\";\r\nimport {AppStateType} from \"../Redux/redux_store\";\r\nimport {connect} from \"react-redux\";\r\nimport Preloader from \"../Components/common/Preloader/Preloader\";\r\n\r\ntype MapStatePropsForRedirectType = {\r\n    isAuth: boolean\r\n};\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType): MapStatePropsForRedirectType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n};\r\n\r\nexport function withSuspense <T>(Component: ComponentType<T>) {\r\n    return (props: any) => {\r\n        return <Suspense fallback={<Preloader/>}>\r\n            <Component {...props}/>\r\n            </Suspense>\r\n    }\r\n    const RedirectComponent = (props: MapStatePropsForRedirectType) => {\r\n        let {isAuth, ...restProps} = props\r\nconsole.log(isAuth)\r\n        if (!isAuth) return <Redirect to={\"/login\"}/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n    const ConnectRedirectComponent = connect (mapStateToPropsForRedirect)(RedirectComponent)\r\n    return ConnectRedirectComponent\r\n}\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Navbar from \"./Components/Navbar/Navbar\";\r\nimport {Route, withRouter} from \"react-router-dom\";\r\nimport News from \"./Components/News/News\";\r\nimport Music from \"./Components/Music/Music\";\r\nimport Settings from \"./Components/Settings/Settings\";\r\nimport UsersContainer from \"./Components/Users/UsersContainer\";\r\nimport HeaderContainer from \"./Components/Header/HeaderContainer\";\r\nimport Login from \"./Components/Login/Login\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport {initializeApp} from \"./Redux/app_reducer\";\r\nimport {AppStateType} from \"./Redux/redux_store\";\r\nimport Preloader from \"./Components/common/Preloader/Preloader\";\r\nimport { Suspense } from 'react';\r\nimport {withSuspense} from \"./hoc/WithSuspense\";\r\n\r\nconst DialogsContainer = React.lazy(()=> import(\"./Components/Dialogs/DialogsContainer\"));\r\nconst ProfileContainer = React.lazy(()=> import(\"./Components/Profile/ProfileContainer\"));\r\n\r\ntype AppPropsType = {\r\n    getAuthUserData: () => void\r\n    initializeApp: () => void\r\n    initialized: boolean\r\n\r\n}\r\n\r\nclass App extends React.Component<AppPropsType> {\r\n    componentDidMount() {\r\n        this.props.initializeApp();\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.initialized) {\r\n            return <Preloader/>\r\n        }\r\n        return (\r\n\r\n            <div className='app-wrapper'>\r\n                <HeaderContainer getAuthUserData={this.props.getAuthUserData}/>\r\n                <Navbar/>\r\n                <div className='app-wrapper-content'>\r\n                    <Route\r\n                        path='/dialogs'\r\n                        render={withSuspense(DialogsContainer)}/>\r\n                    <Route\r\n                        path='/profile/:userId?'\r\n                        render={withSuspense(ProfileContainer)}/>\r\n                    <Route\r\n                        path='/users'\r\n                        render={() => <UsersContainer/>}/>\r\n                    <Route\r\n                        path='/login'\r\n                        render={() => <Login/>}/>\r\n                    <Route path='/news' component={News}/>\r\n                    <Route path='/music' component={Music}/>\r\n                    <Route path='/settings' component={Settings}/>\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    initialized: state.app.initialized\r\n})\r\n\r\nexport default compose<React.ComponentType>\r\n(withRouter, connect(mapStateToProps, {initializeApp}))(App);\r\n","import React from 'react';\r\nimport './index.css';\r\nimport store from \"./Redux/redux_store\";\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport {Provider} from \"react-redux\";\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <HashRouter>\r\n            <App/>\r\n        </HashRouter>\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n","import React from \"react\";\r\nimport styles from './FormControls.module.css';\r\nimport {Field} from \"redux-form\";\r\nimport {required} from \"../../../utils/validators/validators\";\r\n\r\nexport const FormControl = ({input, meta: {touched, error}, children}: any) => {\r\n    const hasError = touched && error;\r\n\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = (props: any) => {\r\n    const {input, meta, children, ...restProps} = props;\r\n    return (\r\n        <FormControl {...props}><textarea {...input} {...restProps} /></FormControl>\r\n    )\r\n};\r\n\r\nexport const Input = (props: any) => {\r\n    const {input, meta, children, ...restProps} = props;\r\n    return (\r\n        <FormControl {...props}><input {...input} {...restProps} /></FormControl>\r\n\r\n    )\r\n};\r\n\r\nexport const createField = (placeholder: string | null, name: string, validators: any[],\r\n                            component: (props: any) => JSX.Element, props?: any, text?: \"\" | string) => (\r\n    <div>\r\n        <Field placeholder={placeholder}\r\n               name={name}\r\n               validate={validators}\r\n               component={component}\r\n               {...props}\r\n               {...text}\r\n        />\r\n    </div>\r\n)","// extracted by mini-css-extract-plugin\nmodule.exports = {\"friendImage\":\"Friends_friendImage__3ZkIh\",\"friendsItem\":\"Friends_friendsItem__2lN0T\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControls_formControl__1Kyke\",\"error\":\"FormControls_error__3Nlp1\",\"formSummaryError\":\"FormControls_formSummaryError__3GFan\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__3Z65M\",\"pageNumber\":\"Paginator_pageNumber__2gSbM\",\"selectedPage\":\"Paginator_selectedPage__EMbSf\"};","export const required = (value: any) => {\r\n    if (value) return undefined;\r\n    return 'Field is required';\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: any) => {\r\n    if (value.lehgth > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__33ieG\",\"loginBlock\":\"Header_loginBlock__Brv6J\"};","import {PostType, ProfilePageType, ProfileType} from \"./Store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {profileAPI, usersAPI} from \"../api/api\";\r\n\r\nconst ADD_POST = \"ADD-POST\";\r\nconst SET_USER_PROFILE = \"SET-USER-PROFILE\";\r\nconst SET_USER_STATUS = \"SET_USER_STATUS\";\r\n\r\nexport type ProfileActionsType =\r\n    ReturnType<typeof addPostActionCreator> |\r\n    ReturnType<typeof setUserProfile> |\r\n    ReturnType<typeof setUserStatus>\r\n\r\nlet initialState: ProfilePageType = {\r\n    posts: [\r\n        {id: 1, message: \"Hi, how are you?\", likesCount: 12},\r\n        {id: 2, message: \"It's my first post\", likesCount: 11},\r\n        {id: 3, message: \"Blabla\", likesCount: 5},\r\n        {id: 4, message: \"Dadada\", likesCount: 14}\r\n    ],\r\n    profile: null,\r\n    status: \"\"\r\n};\r\n\r\nconst profileReducer = (state = initialState, action: ProfileActionsType) => {\r\n    switch (action.type) {\r\n        case ADD_POST:\r\n            const newPost: PostType = {\r\n                id: new Date().getTime(),\r\n                message: action.newPostText,\r\n                likesCount: 0\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n                newPostText: \"\"\r\n            };\r\n        case SET_USER_PROFILE: {\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        }\r\n        case SET_USER_STATUS: {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        }\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\nexport const addPostActionCreator = (newPostText: string) => {\r\n    return {\r\n        type: ADD_POST,\r\n        newPostText\r\n    } as const\r\n}\r\nexport const setUserProfile = (profile: ProfileType) => {\r\n    return {\r\n        type: SET_USER_PROFILE,\r\n        profile\r\n    } as const\r\n}\r\n\r\nexport const setUserStatus = (status: string) => {\r\n    return {\r\n        type: SET_USER_STATUS,\r\n        status\r\n    } as const\r\n}\r\n\r\nexport const getUserProfile = (userId: number) => async (dispatch: Dispatch) => {\r\n    let response = await usersAPI.getProfile(userId)\r\n\r\n    dispatch(setUserProfile(response.data));\r\n}\r\n\r\nexport const getUserStatus = (userId: number) => async (dispatch: Dispatch) => {\r\n    let response = await profileAPI.getStatus(userId)\r\n\r\n    dispatch(setUserStatus(response.data));\r\n}\r\n\r\nexport const updateUserStatus = (status: string) => async (dispatch: Dispatch) => {\r\n    let response = await profileAPI.updateStatus(status)\r\n\r\n    if (response.data.resultCode === 0) {\r\n        // dispatch(setUserStatus(response.data));\r\n\r\n    }\r\n}\r\nexport default profileReducer"],"sourceRoot":""}